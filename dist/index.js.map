{
  "version": 3,
  "sources": ["../lib/poly_p.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -0.3333294987678528;\n\t}\n\treturn float64ToFloat32(-0.3333294987678528 + float64ToFloat32(x * float64ToFloat32(0.19977711141109467 + float64ToFloat32(x * float64ToFloat32(-0.13877685368061066 + float64ToFloat32(x * 0.08053744584321976)))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\nvar PI02F = require( '@stdlib/constants-float32-half-pi' );\nvar PI04F = require( '@stdlib/constants-float32-fourth-pi' );\nvar polyp = require( './poly_p.js' );\n\n\n// MAIN //\n\n/**\n* Computes the arctangent of a single-precision floating-point number.\n*\n* ## Method\n*\n* -   Range reduction is from four intervals into the interval from zero to  tan( pi/8 ). A polynomial approximates the function in this basic interval.\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain  | # trials | peak    | rms     |\n*     |:-----------|:--------|:---------|:--------|:--------|\n*     | IEEE       | -10, 10 | 10^5     | 1.9e-7  | 4.1e-8  |\n*\n* @param {number} x - input value\n* @returns {number} arctangent (in radians)\n*\n* @example\n* var v = atanf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var FLOAT32_PI = require( '@stdlib/constants-float32-pi' );\n*\n* var v = atanf( -FLOAT32_PI/4.0 );\n* // returns ~-0.666\n*\n* @example\n* var FLOAT32_PI = require( '@stdlib/constants-float32-pi' );\n*\n* var v = atanf( FLOAT32_PI/4.0 );\n* // returns ~0.666\n*\n* @example\n* var v = atanf( NaN );\n* // returns NaN\n*/\nfunction atanf( x ) {\n\tvar sgn;\n\tvar y;\n\tvar z;\n\n\tif ( isnanf( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tx = float64ToFloat32( x );\n\tif ( x < 0.0 ) {\n\t\tsgn = -1;\n\t\tx = -x;\n\t} else {\n\t\tsgn = 1;\n\t}\n\t// Range reduction...\n\tif ( x > 2.414213562373095 ) { // tan(3*pi/8)\n\t\ty = PI02F;\n\t\tx = -float64ToFloat32( 1.0 / x );\n\t} else if ( x > 0.4142135623730950 ) { // tan(pi/8)\n\t\ty = PI04F;\n\t\tx = float64ToFloat32( float64ToFloat32( x - 1.0 ) / float64ToFloat32( x + 1.0 ) ); // eslint-disable-line max-len\n\t} else {\n\t\ty = 0.0;\n\t}\n\tz = float64ToFloat32( x * x );\n\ty = float64ToFloat32( y + float64ToFloat32( ( float64ToFloat32( polyp( z ) ) * float64ToFloat32( z * x ) ) + x ) ); // eslint-disable-line max-len\n\tif ( sgn < 0 ) {\n\t\ty = -y;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = atanf;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arctangent of a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-atanf\n*\n* @example\n* var FLOAT32_PI = require( '@stdlib/constants-float32-pi' );\n* var atanf = require( '@stdlib/math-base-special-atanf' );\n*\n* var v = atanf( 0.0 );\n* // returns 0.0\n*\n* v = atanf( -FLOAT32_PI/4.0 );\n* // returns ~-0.666\n*\n* v = atanf( FLOAT32_PI/4.0 );\n* // returns ~0.666\n*\n* v = atanf( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAuBA,IAAIC,EAAmB,QAAS,wCAAyC,EAkBzE,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,mBAEDF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,mBAAsBA,EAAiBE,EAAIF,EAAiB,oBAAuBA,EAAiBE,EAAI,kBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CACrN,CAKAH,EAAO,QAAUE,ICnDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAmB,QAAS,wCAAyC,EACrEC,EAAQ,QAAS,mCAAoC,EACrDC,EAAQ,QAAS,qCAAsC,EACvDC,EAAQ,IA2CZ,SAASC,EAAOC,EAAI,CACnB,IAAIC,EACAC,EACAC,EAEJ,OAAKT,EAAQM,CAAE,GAAKA,IAAM,EAClBA,GAERA,EAAIL,EAAkBK,CAAE,EACnBA,EAAI,GACRC,EAAM,GACND,EAAI,CAACA,GAELC,EAAM,EAGFD,EAAI,mBACRE,EAAIN,EACJI,EAAI,CAACL,EAAkB,EAAMK,CAAE,GACpBA,EAAI,kBACfE,EAAIL,EACJG,EAAIL,EAAkBA,EAAkBK,EAAI,CAAI,EAAIL,EAAkBK,EAAI,CAAI,CAAE,GAEhFE,EAAI,EAELC,EAAIR,EAAkBK,EAAIA,CAAE,EAC5BE,EAAIP,EAAkBO,EAAIP,EAAoBA,EAAkBG,EAAOK,CAAE,CAAE,EAAIR,EAAkBQ,EAAIH,CAAE,EAAMA,CAAE,CAAE,EAC5GC,EAAM,IACVC,EAAI,CAACA,GAECA,EACR,CAKAT,EAAO,QAAUM,IC3EjB,IAAIK,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_poly_p", "__commonJSMin", "exports", "module", "float64ToFloat32", "evalpoly", "x", "require_main", "__commonJSMin", "exports", "module", "isnanf", "float64ToFloat32", "PI02F", "PI04F", "polyp", "atanf", "x", "sgn", "y", "z", "main"]
}
